{
	"nodes":[
		{"id":"703d30ab866002b5","type":"text","text":"# Computer Science\n\n# TOC\n- # [[Computer Science and DSA Learning Roadmap]]\n- ","x":-200,"y":-240,"width":600,"height":280,"color":"4"},
		{"id":"3874d3354fb13e4a","type":"file","file":"Study Habits and Patterns.md","x":-320,"y":-740,"width":620,"height":440},
		{"id":"333ab3aa296714f4","type":"text","text":"# Data Structures\n- ## [[Data Structures Home]]\n- \n\n\n# Data Structures\n- Data Structures are a fundamental element of computer science. They provide a specific way to organize and store data so that it can be accessed and used efficiently. Different types of data structures include arrays, linked lists, stacks, queues, hash tables, trees, and graphs. Each of these has its unique characteristics and use-cases, and is optimal for certain kinds of operations. For example, arrays are excellent for random access, while linked lists work well for frequent insertions and deletions. The correct choice of data structure can significantly enhance the performance of your programs.\n\n# Resources\n- [RoadmapVisit Dedicated DSA Roadmap](https://roadmap.sh/datastructures-and-algorithms)\n- [CourseData Structures and Algorithms By Google](https://techdevguide.withgoogle.com/paths/data-structures-and-algorithms/)\n- [ArticleData Structures and Algorithms](https://www.javatpoint.com/data-structure-tutorial)\n- [VideoData Structures Illustrated](https://www.youtube.com/watch?v=9rhT3P1MDHk&list=PLkZYeFmDuaN2-KUIv-mvbjfKszIGJ4FaY)\n- [VideoData Structures playlist](https://youtube.com/playlist?list=PLDV1Zeh2NRsB6SWUrDFW2RmDotAfPbeHu&si=_EEf7x58G6lUcMGG)\n- [FeedExplore top posts about Data Structures](https://app.daily.dev/tags/data-structures?ref=roadmapsh)\n","x":-10,"y":245,"width":520,"height":135},
		{"id":"ff19ce26eda8d7ad","type":"text","text":"# [[Python DSA Roadmap]]\nRoadmap Card for DSA Roadmap\n\n# TOC\n- ## [[Computer Science and DSA Learning Roadmap]]\n\t- ### [[Python DSA Roadmap]]\n\t\t- ## [[Python Data Structures and Algorithms]]\n\t\t- \n","x":-1840,"y":240,"width":760,"height":280,"color":"5"},
		{"id":"dadc113b78691ea6","type":"text","text":"# Array\n- ## [[Array]]\n\n\nAn array is a linear data structure that can hold elements and arrange them. It uses contiguous memory space to store elements. In an array, we can directly access any element based on its index which makes it an efficient data structure. Arrays have two types: one-dimensional and multi-dimensional. In a one-dimensional array, data is stored in a linear form while a multi-dimensional array can store data in the form of a matrix or in 3-D format.\n\n# Resources\n- [VideoArrays in Python](https://www.youtube.com/watch?v=gDqQf4Ekr2A&ab_channel=codebasics)\n- [VideoArrays in Java](https://www.youtube.com/watch?v=ei_4Nt7XWOw&ab_channel=BroCode)\n- [VideoArrays in Javascript](https://www.youtube.com/watch?v=yQ1fz8LY354)\n- [VideoArrays in GoLang](https://www.youtube.com/watch?v=e-oBn806Pzc&pp=ygUIYXJyYXkgZ28%3D)\n- [VideoArrays in C#](https://www.youtube.com/watch?v=YiE0oetGMAg&pp=ygUIYXJyYXkgYyM%3D)\n- [VideoArrays in C++](https://www.youtube.com/watch?v=G38hQKXa_RU&pp=ygUJYXJyYXkgYysr)\n- [VideoArrays in Rust](https://www.youtube.com/watch?v=cH6Qv47MPwk&pp=ygUKYXJyYXkgcnVzdA%3D%3D)\n- [VideoArrays in Ruby](https://www.youtube.com/watch?v=SP3Vf2KcYeU&pp=ygUKYXJyYXkgcnVieQ%3D%3D)","x":-520,"y":400,"width":279,"height":50},
		{"id":"793396e3e8e42128","type":"text","text":"# Data Structures in Python\n- ## [[Common Python Data Structures]]\n- ","x":-2440,"y":600,"width":520,"height":240},
		{"id":"a202e6cfd1b3294a","type":"text","text":"# To Do List\n- [ ] Data Structures and Algorithms/Computer Science Roadmap Planning\n\t- [ ] Data Structures\n\t\t- [ ] Arrays\n\t\t- [ ] Linked List\n\t\t- [ ] Stack\n\t\t- [ ] Queue\n\t\t- [ ] Trees\n\t\t\t- [ ] Binary Tree\n\t\t\t- [ ] Binary Search Tree\n\t\t\t- [ ] Full Binary Tree\n\t\t\t- [ ] Complete Binary Tree\n\t\t\t- [ ] Balanced Tree\n\t\t\t- [ ] Unbalanced Tree\n\t\t- [ ] Graph\n\t\t\t- [ ] Directed Graph\n\t\t\t- [ ] Undirected Graph\n\t\t\t- [ ] Spanning Tree\n\t\t- [ ] Representation\n\t\t\t- [ ] Adjacency List\n\t\t\t- [ ] Adjacency Matrix\n\t- [ ] Python DSA Roadmap Planning\n\t\t- [ ] Python Data Structures\n\t\t\t- [x] Arrays Python\n\t\t\t- [ ] Linked Lists\n\t\t\t- [ ] Hash Tables\n\t\t\t- [ ] Heap\n\t\t\t- [ ] Stack\n\t\t\t- [ ] Queues\n\t\t\t- [ ] Trees\n\t\t\t\t- [ ] Binary Tree\n\t\t\t\t- [ ] Binary Search Tree\n\t\t\t\t- [ ] Full Binary Tree\n\t\t\t\t- [ ] Complete Binary Tree\n\t\t\t\t- [ ] Balanced Tree\n\t\t\t\t- [ ] Unbalanced Tree\n\t\t\t- [ ] Graph\n\t\t\t\t- [ ] Directed Graph\n\t\t\t\t- [ ] Undirected Graph\n\t\t\t\t- [ ] Spanning Tree\n\t\t\t- [ ] Representation\n\t\t\t\t- [ ] Adjacency List\n\t\t\t\t- [ ] Adjacency Matrix\n\t\t- [ ] Python Algorithms","x":-2440,"y":-570,"width":840,"height":650},
		{"id":"719edd208f1cc369","type":"text","text":"# Arrays and Linked lists\n- Arrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.\n# TOC\n- ## [[Array Data Structures in Python]]\n\t- ### [[Python Array Basics]]\n- ## \n\n# Resources\n- [ArticleArrays in Python](https://www.edureka.co/blog/arrays-in-python/)\n- [ArticleLinked List Python](https://realpython.com/linked-lists-python/)\n- [VideoArray Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=QJNwK2uJyGs)\n- [VideoLinked List Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=odW9FU8jPRQ)","x":-3400,"y":691,"width":600,"height":189},
		{"id":"cbcc31f200ea4dde","type":"text","text":"# Hash Tables\n- Hash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.\n# TOC\n- Hash Tables Python\n# Resources\n- [ArticleBuild a Hash Table in Python](https://realpython.com/python-hash-table/)\n- [ArticleHash Tables and Hashmaps in Python](https://www.edureka.co/blog/hash-tables-and-hashmaps-in-python/)\n- [VideoHash Table Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=jalSiaIi8j4)s","x":-3400,"y":920,"width":600,"height":240},
		{"id":"c0fcac2a9c7d9a44","type":"text","text":"# Heaps Stacks and Queues\n- **Stacks:** Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it’s called a stack overflow.\n- **Queue:** Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.\n- **Heap:** A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).\n# TOC\n- Stacks in Python\n- Queues in Python\n- Heaps in Python\n\n# Resources\n- [ArticleHeaps, Stacks, Queues](https://stephanosterburg.gitbook.io/scrapbook/coding/coding-interview/data-structures/heaps-stacks-queues)\n- [ArticleHow to Implement Python Stack?](https://realpython.com/how-to-implement-python-stack/)\n- [ArticlePython Stacks, Queues, and Priority Queues in Practice](https://realpython.com/queue-in-python/)\n- [ArticleHeap Implementation in Python](https://www.educative.io/answers/heap-implementation-in-python)\n- [VideoStack Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=I5lq6sCuABE)\n- [VideoQueue Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=mDCi1lXd9hc)\n","x":-3400,"y":1200,"width":600,"height":160},
		{"id":"cf7a0b6ba38044e9","type":"text","text":"# Trees","x":-3400,"y":1400,"width":600,"height":81},
		{"id":"df9d94ac20276452","type":"text","text":"# Binary Search Trees\n\nA binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node’s left subtree and less than the ones in its right subtree\n\n\n# Resources\n- [ArticleHow to Implement Binary Search Tree in Python](https://web.archive.org/web/20230601181553/https://www.section.io/engineering-education/implementing-binary-search-tree-using-python/)\n- [ArticleBinary Search Tree in Python](https://www.pythonforbeginners.com/data-structures/binary-search-tree-in-python)\n- [VideoTree Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)","x":-4160,"y":1401,"width":480,"height":159},
		{"id":"e1b720b303e9fb44","type":"text","text":"# Timeline","x":600,"y":-680,"width":640,"height":115},
		{"id":"cdf03bac66b6f0df","type":"text","text":"# 03/02/25\n- [ ] Data Structures\n\t- [ ] Arrays\n\t- [ ] Linked Lists\n\t- [ ] Stacks\n\t- [ ] Queues\n\t- [ ] Heaps\n\t- [ ] Trees\n\t- [ ] Graphs\n\t- [ ] Representation\n\t- [ ] Hash Table\n- [ ] Algorithms\n\t- [ ] ","x":560,"y":-520,"width":555,"height":560},
		{"id":"79175f2a41c70df2","type":"text","text":"# 03/03/25","x":920,"y":-520,"width":680,"height":560},
		{"id":"bdef906c6c9b7070","type":"text","text":"# Linked List\n- [[Linked List]]","x":-520,"y":450,"width":279,"height":50},
		{"id":"3d839b1112c5a3c3","type":"text","text":"# Stacks","x":-520,"y":495,"width":279,"height":50}
	],
	"edges":[
		{"id":"5ae3dd45d074820e","fromNode":"703d30ab866002b5","fromSide":"bottom","toNode":"ff19ce26eda8d7ad","toSide":"top"},
		{"id":"ee7ae9f1d458292c","fromNode":"ff19ce26eda8d7ad","fromSide":"left","toNode":"793396e3e8e42128","toSide":"right"},
		{"id":"3903a2a149f3508e","fromNode":"703d30ab866002b5","fromSide":"bottom","toNode":"333ab3aa296714f4","toSide":"top"},
		{"id":"7fe0a14fff058b5f","fromNode":"333ab3aa296714f4","fromSide":"left","toNode":"dadc113b78691ea6","toSide":"right"},
		{"id":"5596bfca3c44965b","fromNode":"793396e3e8e42128","fromSide":"bottom","toNode":"719edd208f1cc369","toSide":"right"},
		{"id":"5bca020238a4e19b","fromNode":"793396e3e8e42128","fromSide":"bottom","toNode":"cbcc31f200ea4dde","toSide":"right"},
		{"id":"78a175b3a46d1c65","fromNode":"793396e3e8e42128","fromSide":"bottom","toNode":"c0fcac2a9c7d9a44","toSide":"right"},
		{"id":"919248f33a149e18","fromNode":"cf7a0b6ba38044e9","fromSide":"left","toNode":"df9d94ac20276452","toSide":"right"},
		{"id":"b297c9df4c00ee20","fromNode":"333ab3aa296714f4","fromSide":"left","toNode":"bdef906c6c9b7070","toSide":"right"},
		{"id":"b181baa7fa0fe724","fromNode":"333ab3aa296714f4","fromSide":"left","toNode":"3d839b1112c5a3c3","toSide":"right"}
	]
}